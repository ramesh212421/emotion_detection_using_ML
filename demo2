# emotion_detection_complete.py

#  Import necessary libraries
import pandas as pd
import numpy as np
import re
import string
import nltk
import seaborn as sns
import matplotlib.pyplot as plt
import joblib

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

#  Download stopwords for NLTK (only runs the first time)
nltk.download('stopwords')
stop_words = set(nltk.corpus.stopwords.words('english'))

#  Load the train, validation, and test datasets
train_df = pd.read_csv('train.txt', sep=';', names=['text', 'emotion'])
val_df   = pd.read_csv('val.txt', sep=';', names=['text', 'emotion'])
test_df  = pd.read_csv('test.txt', sep=';', names=['text', 'emotion'])

#  Combine the datasets into one DataFrame
full_df = pd.concat([train_df, val_df, test_df], ignore_index=True)

#  Clean the text data
def clean_text(text):
    text = text.lower()  # lowercase
    text = re.sub(r'http\S+', '', text)  # remove URLs
    text = text.translate(str.maketrans('', '', string.punctuation))  # remove punctuations
    text = ' '.join(word for word in text.split() if word not in stop_words)  # remove stopwords
    return text

#  Apply text cleaning
full_df['clean_text'] = full_df['text'].apply(clean_text)

#  Vectorize the cleaned text using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(full_df['clean_text']).toarray()
y = full_df['emotion']

#  Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

#  Train a Logistic Regression model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

#  Predict on the test set
y_pred = model.predict(X_test)

#  Evaluate model performance
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

#  Plot Confusion Matrix
plt.figure(figsize=(8, 6))
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(
    cm,
    annot=True,
    fmt='d',
    cmap='Blues',
    xticklabels=model.classes_,
    yticklabels=model.classes_
)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.tight_layout()
plt.show()

#Save the trained model and vectorizer
joblib.dump(model, 'emotion_model.pkl')
joblib.dump(vectorizer, 'vectorizer.pkl')

print("\n Model and vectorizer have been saved successfully.")
